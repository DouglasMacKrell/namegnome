[tool.poetry]
name = "namegnome"
version = "0.1.0"
description = "A tool to analyze, rename and reorganize media files for media servers"
authors = ["DouglasMacKrell <d.mackrell@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/DouglasMacKrell/namegnome"
keywords = ["media", "rename", "organize", "plex", "jellyfin", "emby"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
click = "8.1.8"
httpx = "0.28.1"
jinja2 = ">=3.1.0"
pydantic = ">=2.0.0"
pydantic-settings = "*"
rich = ">=13.3.5"
typer = "0.15.3"
types-requests = "*"
deptry = "*"
mypy = "*"
tomli = "*"
tomli-w = "*"
python-dotenv = ">=1.0.0,<2.0.0"
rapidfuzz = ">=3.13.0"
respx = "0.22.0"
nltk = "*"
pyyaml = "*"

[tool.poetry.group.dev.dependencies]
black = "*"
ruff = "*"
pytest = "*"
pytest-cov = "*"
pre-commit = "*"
pytest-asyncio = "*"
pytest-mock = "*"
respx = "*"
types-requests = "*"
types-PyYAML = "*"

# Expose the same developer dependencies as an installable "dev" extra so
# that installation via classic `pip install -e ".[dev]"` (used by CI)
# pulls them in even outside of Poetry. This keeps CI lightweight without
# requiring a Poetry runtime while ensuring the right tooling is present.
[tool.poetry.extras]
dev = [
  "black",
  "ruff",
  "pytest",
  "pytest-cov",
  "pre-commit",
  "pytest-asyncio",
  "pytest-mock",
  "respx",
  "types-requests",
  "types-PyYAML",
]

# -------------------------
# PEP 517 build metadata
# -------------------------
# GitHub CI installs the project via `pip install -e .` without Poetry.
# Without an explicit `[build-system]` table, pip falls back to the legacy
# setuptools backend and therefore completely ignores the `[tool.poetry.*]`
# tables. As a result the built wheel contains *zero* `Requires-Dist`
# entries and none of NameGnome's runtime dependencies (typer, rich,
# pydantic, httpx, ...) are installed — leading to the massive import error
# cascade during test collection.
#
# Adding an explicit build-system section that points at Poetry Core makes
# pip understand the project layout and propagate dependency metadata into
# the wheel, restoring a functioning runtime environment in CI as well as
# for any user who installs straight from the source distribution.

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.deptry.per_rule_ignores]
# These dependencies are either:
# • used indirectly by higher-level libraries (e.g. Typer vendoring Click),
# • optional runtime helpers (`python-dotenv`),
# • tooling that is executed outside the scanned source tree (`deptry`, `mypy`),
# • or test/HTTP-mock utilities (`respx`, `nltk`, `types-requests`).
# Deptry incorrectly marks them as unused (DEP002). We silence those false-positives
# so that the pre-commit hook passes while still catching real issues.
DEP002 = [
  "click",
  "types-requests",
  "deptry",
  "mypy",
  "python-dotenv",
  "respx",
  "nltk",
]

# Silence transitive import flag for one-off helper script that uses Requests.
DEP003 = ["requests"]

# pyyaml provides "yaml" top-level; despite the module map deptry still
# reports DEP001. Ignore it explicitly to unblock CI.
DEP001 = ["yaml", "pyyaml"]

[tool.deptry.package_module_name_map]
pyyaml = "yaml"

[tool.deptry]
known_first_party = ["namegnome"]
